//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""dce871d9-5e8a-4688-a139-21fed9ad48c6"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""61801c95-b4c1-4b8e-a15c-8fe6baed0642"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": ""ScaleVector2(x=3,y=3)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1277dd3c-69ce-406e-b4ab-59de86d9b4c8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1dcf4bb7-edf1-442f-a98c-e571a0d4be12"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2e7e0176-e191-4be4-97d4-dcdee6851b20"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9cd4a8a5-d9b1-4709-aecc-a72c7a1707e0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""78ecbd08-0482-498d-aea9-c213c075cc01"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1fbc541d-4d49-46a6-a2eb-57843c350715"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialog"",
            ""id"": ""b0d2f008-6e12-45fe-8c30-de1daa5adcec"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""cc2931f3-5826-458b-91f8-0655392e8a19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Auto"",
                    ""type"": ""Button"",
                    ""id"": ""164119d4-f61e-420b-aff2-cb78c6ec7a2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowTranscript"",
                    ""type"": ""Button"",
                    ""id"": ""e9b5ba23-7c04-451b-9c50-102010308301"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3bd42fad-3c72-4247-8727-51c33838b400"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33a43fbe-b41a-4363-be00-dcfd614f5843"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f875695a-a80f-4043-837e-9aec9b6a37c5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Auto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75f72d90-08ce-48fd-acd1-1ded1ad56c45"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ShowTranscript"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChaseMovement"",
            ""id"": ""10c1943c-ee05-4f5d-a2e3-7633c58a9873"",
            ""actions"": [
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""1416ac97-d253-4a44-9145-a154f6366322"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": ""ScaleVector2(x=50,y=50)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d19f3d02-9972-4a39-940a-a0d7add37d40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c5c01d39-6b9c-4e1e-8288-de97798236f4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fc58c0f9-988e-44d6-914a-34b505215200"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""373d008b-03ab-4219-b1e8-7b8d115b2f81"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8e95e407-03b5-4f84-be5c-a27521789dc8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""16b9c5e2-f13a-4af1-9d7b-fe96d6ce2a7d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d8bb28a-7978-44ba-8499-9536a85814d2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eda5d89d-d905-4b34-b132-3b34f323734e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1127a7b-1d57-48b6-9e9c-822eba8881a9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""d3e1b269-e265-4034-b695-123c8b609c6b"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""012eefbd-37e3-4a29-8e5a-7638c894e1cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""39105158-6057-4766-9551-45f88cdeebc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""90941c33-f9e6-4a2b-9bb6-a55a52e266e3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9166a80-66bc-4227-9724-85706c40d12d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6556efa9-4ff5-49a4-bc8a-73818ef1e853"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4cdc940-f919-4186-b35a-8e16001698e1"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ButtonMashing"",
            ""id"": ""d69f51b9-5962-4664-981e-ef188e312d50"",
            ""actions"": [
                {
                    ""name"": ""Button"",
                    ""type"": ""Button"",
                    ""id"": ""56029723-3a1b-4429-af82-c65a2bbef478"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52c9ec31-6913-4160-9025-8ea23d42a577"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e19064e7-3f26-4175-a5d7-f0f32206b200"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LockRhythm"",
            ""id"": ""f1264aed-1226-4b01-8bef-628e897e4853"",
            ""actions"": [
                {
                    ""name"": ""LockNum"",
                    ""type"": ""Button"",
                    ""id"": ""bbf6d520-d9d0-40bf-86d9-aa5b85f921dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e0d90a7-1d90-4680-a62b-e612acd777f7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""LockNum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""109dc312-ff91-461a-bc79-31aba84092c0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""LockNum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afaf78bd-72ea-472f-82e3-5754bcdb3b46"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LockNum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""181b24d5-082c-429c-8e8c-319c61d4e774"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LockNum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""877488f9-e519-45fa-87e9-3a999049187f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LockNum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dabb47b-cf57-415e-b23a-5727b17f216c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LockNum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Walk = m_Movement.FindAction("Walk", throwIfNotFound: true);
        // Dialog
        m_Dialog = asset.FindActionMap("Dialog", throwIfNotFound: true);
        m_Dialog_Continue = m_Dialog.FindAction("Continue", throwIfNotFound: true);
        m_Dialog_Auto = m_Dialog.FindAction("Auto", throwIfNotFound: true);
        m_Dialog_ShowTranscript = m_Dialog.FindAction("ShowTranscript", throwIfNotFound: true);
        // ChaseMovement
        m_ChaseMovement = asset.FindActionMap("ChaseMovement", throwIfNotFound: true);
        m_ChaseMovement_Run = m_ChaseMovement.FindAction("Run", throwIfNotFound: true);
        m_ChaseMovement_Jump = m_ChaseMovement.FindAction("Jump", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Look = m_Camera.FindAction("Look", throwIfNotFound: true);
        m_Camera_Click = m_Camera.FindAction("Click", throwIfNotFound: true);
        // ButtonMashing
        m_ButtonMashing = asset.FindActionMap("ButtonMashing", throwIfNotFound: true);
        m_ButtonMashing_Button = m_ButtonMashing.FindAction("Button", throwIfNotFound: true);
        // LockRhythm
        m_LockRhythm = asset.FindActionMap("LockRhythm", throwIfNotFound: true);
        m_LockRhythm_LockNum = m_LockRhythm.FindAction("LockNum", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Walk;
    public struct MovementActions
    {
        private @Controller m_Wrapper;
        public MovementActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Movement_Walk;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Dialog
    private readonly InputActionMap m_Dialog;
    private List<IDialogActions> m_DialogActionsCallbackInterfaces = new List<IDialogActions>();
    private readonly InputAction m_Dialog_Continue;
    private readonly InputAction m_Dialog_Auto;
    private readonly InputAction m_Dialog_ShowTranscript;
    public struct DialogActions
    {
        private @Controller m_Wrapper;
        public DialogActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_Dialog_Continue;
        public InputAction @Auto => m_Wrapper.m_Dialog_Auto;
        public InputAction @ShowTranscript => m_Wrapper.m_Dialog_ShowTranscript;
        public InputActionMap Get() { return m_Wrapper.m_Dialog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogActions set) { return set.Get(); }
        public void AddCallbacks(IDialogActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
            @Auto.started += instance.OnAuto;
            @Auto.performed += instance.OnAuto;
            @Auto.canceled += instance.OnAuto;
            @ShowTranscript.started += instance.OnShowTranscript;
            @ShowTranscript.performed += instance.OnShowTranscript;
            @ShowTranscript.canceled += instance.OnShowTranscript;
        }

        private void UnregisterCallbacks(IDialogActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
            @Auto.started -= instance.OnAuto;
            @Auto.performed -= instance.OnAuto;
            @Auto.canceled -= instance.OnAuto;
            @ShowTranscript.started -= instance.OnShowTranscript;
            @ShowTranscript.performed -= instance.OnShowTranscript;
            @ShowTranscript.canceled -= instance.OnShowTranscript;
        }

        public void RemoveCallbacks(IDialogActions instance)
        {
            if (m_Wrapper.m_DialogActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogActions @Dialog => new DialogActions(this);

    // ChaseMovement
    private readonly InputActionMap m_ChaseMovement;
    private List<IChaseMovementActions> m_ChaseMovementActionsCallbackInterfaces = new List<IChaseMovementActions>();
    private readonly InputAction m_ChaseMovement_Run;
    private readonly InputAction m_ChaseMovement_Jump;
    public struct ChaseMovementActions
    {
        private @Controller m_Wrapper;
        public ChaseMovementActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Run => m_Wrapper.m_ChaseMovement_Run;
        public InputAction @Jump => m_Wrapper.m_ChaseMovement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_ChaseMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChaseMovementActions set) { return set.Get(); }
        public void AddCallbacks(IChaseMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_ChaseMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChaseMovementActionsCallbackInterfaces.Add(instance);
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IChaseMovementActions instance)
        {
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IChaseMovementActions instance)
        {
            if (m_Wrapper.m_ChaseMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChaseMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_ChaseMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChaseMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChaseMovementActions @ChaseMovement => new ChaseMovementActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Look;
    private readonly InputAction m_Camera_Click;
    public struct CameraActions
    {
        private @Controller m_Wrapper;
        public CameraActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Camera_Look;
        public InputAction @Click => m_Wrapper.m_Camera_Click;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // ButtonMashing
    private readonly InputActionMap m_ButtonMashing;
    private List<IButtonMashingActions> m_ButtonMashingActionsCallbackInterfaces = new List<IButtonMashingActions>();
    private readonly InputAction m_ButtonMashing_Button;
    public struct ButtonMashingActions
    {
        private @Controller m_Wrapper;
        public ButtonMashingActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Button => m_Wrapper.m_ButtonMashing_Button;
        public InputActionMap Get() { return m_Wrapper.m_ButtonMashing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonMashingActions set) { return set.Get(); }
        public void AddCallbacks(IButtonMashingActions instance)
        {
            if (instance == null || m_Wrapper.m_ButtonMashingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ButtonMashingActionsCallbackInterfaces.Add(instance);
            @Button.started += instance.OnButton;
            @Button.performed += instance.OnButton;
            @Button.canceled += instance.OnButton;
        }

        private void UnregisterCallbacks(IButtonMashingActions instance)
        {
            @Button.started -= instance.OnButton;
            @Button.performed -= instance.OnButton;
            @Button.canceled -= instance.OnButton;
        }

        public void RemoveCallbacks(IButtonMashingActions instance)
        {
            if (m_Wrapper.m_ButtonMashingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IButtonMashingActions instance)
        {
            foreach (var item in m_Wrapper.m_ButtonMashingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ButtonMashingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ButtonMashingActions @ButtonMashing => new ButtonMashingActions(this);

    // LockRhythm
    private readonly InputActionMap m_LockRhythm;
    private List<ILockRhythmActions> m_LockRhythmActionsCallbackInterfaces = new List<ILockRhythmActions>();
    private readonly InputAction m_LockRhythm_LockNum;
    public struct LockRhythmActions
    {
        private @Controller m_Wrapper;
        public LockRhythmActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @LockNum => m_Wrapper.m_LockRhythm_LockNum;
        public InputActionMap Get() { return m_Wrapper.m_LockRhythm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LockRhythmActions set) { return set.Get(); }
        public void AddCallbacks(ILockRhythmActions instance)
        {
            if (instance == null || m_Wrapper.m_LockRhythmActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LockRhythmActionsCallbackInterfaces.Add(instance);
            @LockNum.started += instance.OnLockNum;
            @LockNum.performed += instance.OnLockNum;
            @LockNum.canceled += instance.OnLockNum;
        }

        private void UnregisterCallbacks(ILockRhythmActions instance)
        {
            @LockNum.started -= instance.OnLockNum;
            @LockNum.performed -= instance.OnLockNum;
            @LockNum.canceled -= instance.OnLockNum;
        }

        public void RemoveCallbacks(ILockRhythmActions instance)
        {
            if (m_Wrapper.m_LockRhythmActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILockRhythmActions instance)
        {
            foreach (var item in m_Wrapper.m_LockRhythmActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LockRhythmActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LockRhythmActions @LockRhythm => new LockRhythmActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnWalk(InputAction.CallbackContext context);
    }
    public interface IDialogActions
    {
        void OnContinue(InputAction.CallbackContext context);
        void OnAuto(InputAction.CallbackContext context);
        void OnShowTranscript(InputAction.CallbackContext context);
    }
    public interface IChaseMovementActions
    {
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IButtonMashingActions
    {
        void OnButton(InputAction.CallbackContext context);
    }
    public interface ILockRhythmActions
    {
        void OnLockNum(InputAction.CallbackContext context);
    }
}
